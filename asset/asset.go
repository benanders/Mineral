// Code generated by go-bindata.
// sources:
// asset/data/blocks.toml
// asset/data/shaders/chunkFrag.glsl
// asset/data/shaders/chunkVert.glsl
// asset/data/shaders/skyFrag.glsl
// asset/data/shaders/skyVert.glsl
// asset/data/shaders/sunriseFrag.glsl
// asset/data/shaders/sunriseVert.glsl
// asset/data/textures/blocks/bedrock.png
// asset/data/textures/blocks/cobblestone.png
// asset/data/textures/blocks/dirt.png
// asset/data/textures/blocks/stone.png
// asset/data/textures/environment/moon.png
// asset/data/textures/environment/sun.png
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _blocksToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\xb1\x4e\xc3\x30\x10\xc6\xf1\xdd\x4f\x71\x0a\x7b\xfb\x04\x1d\x4a\x59\x61\x01\xb1\x54\x1d\xec\xe4\x82\x4e\x39\x6c\xeb\xee\x82\xe0\xed\x51\x6c\x24\x12\x29\xd9\xd2\x2d\xf7\x29\xfa\xff\xec\x1e\xe0\x0c\x4c\x6a\x90\x7a\xc8\x92\x32\x8a\x11\xea\x74\xe1\x17\xca\x0f\x04\x4e\xed\x00\x14\xe1\x99\x22\x8a\xe7\x83\x73\xd7\x6b\x19\xf5\x76\x73\x2f\xfe\x13\xe1\x04\xcd\x99\xa4\x71\xef\xa4\x14\x78\xba\x7b\xcf\x8a\xee\x92\x98\xa9\xf3\xf3\xe9\x4d\x7c\xd4\xec\x05\xa3\xc1\x09\x4c\x46\x5c\xcd\x3d\x62\x27\xa9\x1d\xe6\xc9\xf2\xef\xa2\x58\x96\x65\xf0\x0f\xc1\x6f\x1b\xa5\x84\xac\x7e\xea\xb1\x12\xc7\x50\xc3\x87\x1c\x3f\x9a\x55\xf9\x89\xc4\xf6\x67\x3b\x12\xdb\x36\x5f\x2d\x45\xdc\x1f\xd5\x29\xbb\xad\x5e\x52\x08\x8c\x7a\x1f\xbb\xfd\x8f\xd7\x17\xfc\x06\x00\x00\xff\xff\xda\xdb\x91\x81\x68\x02\x00\x00")

func blocksTomlBytes() ([]byte, error) {
	return bindataRead(
		_blocksToml,
		"blocks.toml",
	)
}

func blocksToml() (*asset, error) {
	bytes, err := blocksTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blocks.toml", size: 616, mode: os.FileMode(420), modTime: time.Unix(1517129937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersChunkfragGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x3d\xaa\x02\x31\x14\x05\xe0\xfa\x9d\x55\x1c\x78\xcd\x0c\x58\xc8\x8c\x5d\xb0\x10\xdc\x82\xf6\x31\x66\x24\x98\xe4\xca\xcd\x0f\x82\xb8\x77\x51\x04\xdb\xaf\xf8\xfe\xbb\xd7\x12\x24\x73\x9e\xd7\x40\xcb\x61\x11\x4d\x2c\x36\xdd\xa2\xd7\x69\xcf\x53\x14\x77\xdd\xd5\x68\x8b\x01\x42\x66\xf7\x6e\xe2\xa2\xf6\x72\x38\x1a\x48\xab\x6f\xd8\xd0\x49\x14\x35\x40\x97\x70\x66\xb2\x21\x0f\x23\x1f\xf8\xfb\x30\xb7\xac\xfe\x5e\x9b\xfa\xe1\x97\xad\xbe\xc7\x68\xf0\xc4\x2b\x00\x00\xff\xff\xc6\x78\xcd\xc2\x84\x00\x00\x00")

func shadersChunkfragGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersChunkfragGlsl,
		"shaders/chunkFrag.glsl",
	)
}

func shadersChunkfragGlsl() (*asset, error) {
	bytes, err := shadersChunkfragGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/chunkFrag.glsl", size: 132, mode: os.FileMode(420), modTime: time.Unix(1517128820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersChunkvertGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xc1\x0a\x82\x40\x14\x45\xd7\xbe\xaf\xb8\xd0\x46\x23\xc2\x1a\x77\x83\xff\xd0\xa6\xb6\x31\x94\xca\x03\xe7\x3d\x19\x67\x66\x13\xfd\x7b\x98\xd9\xf2\x5c\xb8\xe7\xec\x72\x17\x66\x56\x81\x31\x35\x51\x12\xee\x35\x78\x78\x17\x1b\xf8\x3c\x59\x22\x16\xe4\xee\x61\x30\xe9\xcc\x91\x55\xec\x7f\x11\x0d\xde\x8d\x1b\x9f\x91\xb2\x25\xd2\x14\x57\xea\x83\x1b\xae\x37\x4b\x94\x95\x9f\xf0\x8e\xa5\xac\xf0\xa2\x62\x18\xef\x97\x9f\x0a\xed\xd2\xc0\x7e\x39\x34\xe5\x16\x38\xe0\x74\xac\x2b\x4b\xc5\x6a\x40\xfb\x15\xbf\xe9\x13\x00\x00\xff\xff\x0a\x8b\x9c\xab\xaa\x00\x00\x00")

func shadersChunkvertGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersChunkvertGlsl,
		"shaders/chunkVert.glsl",
	)
}

func shadersChunkvertGlsl() (*asset, error) {
	bytes, err := shadersChunkvertGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/chunkVert.glsl", size: 170, mode: os.FileMode(420), modTime: time.Unix(1517211862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersSkyfragGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xeb\x30\x10\x45\xd7\x9e\xaf\xb8\xf0\x36\xf2\xc3\x24\x2e\xe9\xa2\x60\xb2\xea\xba\x90\x4d\xd7\x45\x51\x24\x47\x44\xd6\x04\x49\x76\x6b\x4a\xff\xbd\x58\xb6\x4b\x93\xee\xa4\xc3\x9d\xe1\xcc\xfd\x37\xe8\x10\x2d\x7b\xec\x76\x35\x51\xef\xad\xe1\xd0\x61\xd0\x6a\x87\x78\x19\x9f\xd9\x71\x68\x6e\xb1\xe1\xf6\x0e\x1b\xc7\x32\xc1\xc8\x70\x70\xd2\xeb\x86\xc8\xfa\x25\x1a\x64\x7b\xe0\xd8\x10\xf7\x69\x22\x8f\x50\xf3\x24\x0d\x6c\x4f\xe8\xa4\xf5\xa2\xc4\x27\x15\xdb\x2d\x5e\xa3\x46\x3a\x6b\x5c\x39\xda\x34\x09\xb1\xc9\xff\x69\x47\xa7\x7d\x42\x62\x28\xe9\x54\xef\x64\x9a\x93\x86\x5b\xc4\x14\xb4\x6f\xd3\x99\x8a\x45\x82\xdb\xb7\x95\x61\x0f\x97\x1f\x62\xf1\x28\xb1\x85\x58\x35\xf1\x1f\xf5\xe6\xa9\x6c\xa8\xb8\x9b\x51\x4e\x76\x57\xf1\x1b\x56\xa8\x37\x75\x85\x87\x4d\x5d\x36\x94\x65\x5f\xf8\x34\x7b\x1c\x75\x7a\xd7\xda\x67\x9f\x78\x19\x21\xfd\x29\x7b\xe5\x3b\x23\x8e\xe3\x1f\x53\x18\xa9\x12\x07\x2a\x72\x04\xfb\xdc\x8b\xe8\xec\x87\x58\xfb\xae\x7e\x2a\xae\x6e\xee\x29\x57\x85\x2f\xfa\x0e\x00\x00\xff\xff\xc1\x9c\xa2\x40\xb6\x01\x00\x00")

func shadersSkyfragGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersSkyfragGlsl,
		"shaders/skyFrag.glsl",
	)
}

func shadersSkyfragGlsl() (*asset, error) {
	bytes, err := shadersSkyfragGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/skyFrag.glsl", size: 438, mode: os.FileMode(420), modTime: time.Unix(1515991337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersSkyvertGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\x0a\x83\x30\x14\x84\xe1\xb5\x73\x8a\x81\x6e\xb4\x94\x62\x89\xbb\xe0\x1d\xbc\x41\x09\xad\xca\x83\x26\x4f\x92\x98\x4d\xe9\xdd\x8b\xd4\x82\xdb\x61\xfe\xef\x54\xc6\x98\x44\x03\x8d\x69\x81\x35\xc8\xa4\xd1\xd3\xbb\xdc\xd1\x97\xc5\x02\x12\x58\xc6\x87\xe1\xa2\x49\xb2\x68\xb0\xd0\x35\xff\xa6\x29\xba\x79\xd0\x64\x81\xa2\xf2\xa4\x77\x12\xea\x86\x6f\x54\xf3\xeb\x3e\xec\x77\xf6\x9b\xc3\xf3\x56\x74\xf5\x1f\xb9\xf0\x76\x6d\x1b\x8b\x6a\x27\xd8\x1f\xfc\x0f\xbe\x01\x00\x00\xff\xff\x76\x6a\xb5\x19\x95\x00\x00\x00")

func shadersSkyvertGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersSkyvertGlsl,
		"shaders/skyVert.glsl",
	)
}

func shadersSkyvertGlsl() (*asset, error) {
	bytes, err := shadersSkyvertGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/skyVert.glsl", size: 149, mode: os.FileMode(420), modTime: time.Unix(1515991328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersSunrisefragGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x6e\xeb\x30\x0c\x44\xd7\xd1\x29\x06\xf8\x9b\xe4\x23\x48\x52\xa4\x3b\xa3\x8b\xa2\x57\xc8\x05\x58\x5b\xb2\x08\x48\xa4\x41\xc9\xde\x14\xbd\x7b\x11\xd9\x68\xd3\x2e\x45\x3d\x72\x1e\xe6\xdf\xe2\xad\xb0\x0a\xae\xd7\x8b\x73\xb3\x70\x50\xcb\x58\x7c\xff\x8c\x32\x8b\x71\xf1\x6f\x9a\xd4\x3a\xe7\x58\x10\x92\x52\x45\x30\x1a\x5f\xd3\x14\xa9\x73\x3a\xd7\x95\xed\x37\x68\x51\x1e\x90\x89\x65\x7f\xc0\x87\xdb\x9d\xcf\xb8\x45\x0f\xba\xd3\xc8\x73\xaa\x3c\x25\xf6\x06\x2e\x78\x42\x50\x43\x8d\x1e\xbd\x97\x6a\x1e\x93\xb2\x54\x68\x68\xb3\x40\x72\x04\xc9\x80\x4b\xc3\x28\xa5\x76\xec\xfe\xd5\xb8\x02\x95\xf6\x32\xce\x27\xdc\x22\x17\x64\x4f\x52\xda\x6c\x13\x5f\xa5\x10\x68\xf0\x05\x55\x21\x5a\x23\xcb\x08\x95\xef\x5b\xc6\x79\x8d\x89\x54\x40\xb2\x89\xf6\x9a\x27\x15\xbf\xda\x3c\xb6\x70\x22\x50\x7d\x70\x76\xbb\x35\xe2\xa5\x95\xb0\xff\x85\xda\xf8\x7e\xfc\xbb\xfc\xff\xa7\xbb\x43\xe7\x3e\xdd\x57\x00\x00\x00\xff\xff\x5d\xf8\xf7\x20\x7d\x01\x00\x00")

func shadersSunrisefragGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersSunrisefragGlsl,
		"shaders/sunriseFrag.glsl",
	)
}

func shadersSunrisefragGlsl() (*asset, error) {
	bytes, err := shadersSunrisefragGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/sunriseFrag.glsl", size: 381, mode: os.FileMode(420), modTime: time.Unix(1515991354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersSunrisevertGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6a\xc3\x30\x10\x45\xd7\x9e\x53\x7c\xe8\x26\x09\xc1\x49\x71\x76\x22\x8b\xd2\x75\xa1\x37\x28\xaa\x23\x27\x03\xd2\x8c\x91\x65\xd3\xa4\xf4\xee\xc5\x6a\x64\x28\x59\xea\x21\x3d\xfd\xf7\x34\xb9\x38\xb0\x0a\x9a\x66\x4f\x34\x0a\x77\x1a\x03\x82\x4d\x07\x84\xa9\x37\x0b\x99\x5c\x7b\xc0\x30\x4a\xe4\xc1\xbd\xaa\xd7\x68\x88\x58\x66\xdc\xa0\xd7\x81\x13\xab\x98\x99\x74\x5e\x6d\x82\xf5\xfd\xc5\x1a\xd2\x31\xdd\x41\x17\xed\xf9\xe5\x0f\xd2\xa4\x7c\x42\xb0\x2c\xab\x35\xbe\xa9\xda\xed\xf0\xa6\xa7\xd1\xdb\xe4\x90\x2e\x0e\x37\xb4\x1a\x7a\x15\x27\x09\xda\x65\x54\x7e\xc0\xe7\x35\x9f\xb3\xfe\xe1\x5a\x56\xdd\x37\xa2\x9d\x47\x52\x75\xf6\x1f\xef\xe5\xf1\x71\x4e\xc2\x26\xb7\xac\x8a\xb2\xfe\xba\x6e\x17\x7f\x7d\xc3\xe6\x5f\x65\x6d\xb7\x78\xae\xf7\x6b\x43\xd5\x52\x80\x63\xc9\xfb\xa1\xdf\x00\x00\x00\xff\xff\x59\x6c\x88\x3c\x3f\x01\x00\x00")

func shadersSunrisevertGlslBytes() ([]byte, error) {
	return bindataRead(
		_shadersSunrisevertGlsl,
		"shaders/sunriseVert.glsl",
	)
}

func shadersSunrisevertGlsl() (*asset, error) {
	bytes, err := shadersSunrisevertGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/sunriseVert.glsl", size: 319, mode: os.FileMode(420), modTime: time.Unix(1515991346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksBedrockPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xe1\x00\x1e\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xa8\x49\x44\x41\x54\x78\xda\x8d\x52\xdb\x11\xc0\x20\x08\xe3\xcf\x81\x1c\xc6\x01\x1c\xca\x71\xdb\xc3\xbb\xf4\x02\x0d\xb5\x1f\xb4\x8a\x98\x07\x68\x63\x8c\xab\xf7\x1e\xc2\x73\x6b\xad\x1d\xad\xb5\xfd\xaf\xea\xcc\x3f\x7c\x21\x87\x17\xf2\xde\x01\x71\xc7\xcf\x36\x80\x27\x81\xca\x6b\x5c\x06\x1b\x93\x61\x6d\x39\x01\xc0\x9c\xcf\xf2\x83\x05\x96\x5b\x85\xb2\xe7\x44\xc6\x68\x8a\x8d\x15\xf1\x19\x72\x06\x34\xdf\xcc\x39\x9f\x22\xce\x67\xff\x41\x41\xc5\xcc\x91\x1b\xcb\x8a\x4d\xcd\x5c\x75\xbd\x0a\xfb\x62\xae\xfc\xc3\xe2\xeb\x21\xe5\x8e\xb3\x7c\x66\x65\x75\xc6\x0c\x60\x51\xf2\x55\xee\x69\xe2\x9f\xf9\x1f\x1f\x12\x8a\x2b\xcf\xb0\x92\x55\x1c\xc7\xa8\xac\x04\x05\x6a\xe6\xd5\x23\x52\xc0\x37\xa6\xe5\xfa\x44\xae\xdd\xf8\x35\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x0a\x97\xa4\x48\xe1\x00\x00\x00")

func texturesBlocksBedrockPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksBedrockPng,
		"textures/blocks/bedrock.png",
	)
}

func texturesBlocksBedrockPng() (*asset, error) {
	bytes, err := texturesBlocksBedrockPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/bedrock.png", size: 225, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksCobblestonePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x38\x02\xc7\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x01\xff\x49\x44\x41\x54\x78\xda\x4d\x53\xd7\xca\xaa\x41\x0c\xdc\x07\xf4\x17\x3b\x76\xb1\x2b\x28\x56\x10\xc5\x82\x5d\xc1\x7e\xa1\x58\x10\x51\x54\xc4\xfa\x06\x3e\x5a\x0e\x93\x43\x16\x2f\xc2\xb7\x9b\x6f\xd2\x66\xb2\xaa\x56\xab\x51\x24\x12\xa1\x50\x28\x44\x9f\xcf\x87\x6e\xb7\x1b\x35\x1a\x0d\xca\x66\xb3\x7c\x3e\x1e\x8f\x54\xaf\xd7\x19\x63\xb1\x58\xc8\xed\x76\x53\x3a\x9d\xa6\xcb\xe5\xc2\x78\x35\x1c\x0e\x39\x18\xe0\xc7\xe3\x41\xfd\x7e\x9f\xe2\xf1\x38\xdf\x7b\xbd\x1e\x83\xc6\xe3\x31\x4d\x26\x13\xc6\x85\xc3\x61\x3a\x9d\x4e\x5c\x04\xa6\xe0\x3c\x1c\x0e\x54\xa9\x54\xb4\x13\x95\x90\x60\xb1\x58\x68\x5f\xb7\xdb\x25\x87\xc3\xa1\xbb\x5d\xad\x56\xd4\x6e\xb7\xff\x27\x80\x6d\xb7\x5b\xc2\x38\xb9\x5c\x8e\x81\x08\x6a\x36\x9b\x34\x9d\x4e\xf9\x0c\x9f\xd3\xe9\xa4\xf3\xf9\x4c\x12\x63\xb5\x5a\x49\xad\xd7\x6b\xae\x06\xc0\xaf\x25\x12\x09\x0e\x34\x99\x4c\x64\xb7\xdb\x19\xb3\xd9\x6c\x74\x47\x48\x90\xc9\x64\x48\xbd\xdf\x6f\xaa\x56\xab\x94\xcf\xe7\xe9\xf5\x7a\x31\x69\xcf\xe7\x93\x01\x92\xe8\xfb\xfd\xd2\x7e\xbf\xe7\x40\xe9\x08\x5c\xe1\x9f\x2a\x95\x4a\x7c\xf1\xfb\xfd\xb4\xdb\xed\xa8\xd5\x6a\x31\x1f\x60\x5e\x5a\x85\x21\x08\x64\x0e\x06\x03\x9a\xcf\xe7\x8c\x87\x22\xaa\x5c\x2e\x13\x92\x14\x8b\x45\xae\xf8\xf7\xf7\x47\x06\x83\x81\xcf\x50\xe8\x7a\xbd\x32\x17\x3e\x9f\x8f\x15\x40\xa7\x98\x1d\x77\xa8\xa5\x44\x42\x31\x01\x43\xd2\xe5\x72\xa9\xfd\xb3\xd9\x8c\x52\xa9\x14\x93\x3d\x1a\x8d\x28\x1a\x8d\x72\x67\x4a\xda\xc3\x18\xd2\x26\x88\x8b\xc5\x62\x5c\x4d\x12\x20\x18\xff\x8d\x46\x23\xfd\x16\x55\xd0\xdc\xe3\xf1\x70\xbb\xc2\xba\xcc\x9d\x4c\x26\x79\x4e\x61\x1e\xff\x82\xc1\xa0\x0e\x06\x5f\x0a\xb3\xc2\x89\x2f\xc0\x08\x84\x12\x50\x04\x80\x42\xa1\x40\x66\xb3\x59\x27\x85\x6a\x58\x2a\x10\xa9\x37\x11\x12\x61\x1f\xb0\x5d\x2e\x97\x8b\x17\x0a\xeb\x0a\xc9\xee\xf7\x3b\x57\x93\x04\x38\x77\x3a\x1d\x36\x56\x01\xd5\xf0\x30\xb0\xeb\xa2\x2d\x3a\x12\x1e\xa0\x0e\xc0\x48\x8a\x04\x90\x18\x52\xca\x76\x2a\x80\xc0\x2a\x12\xc1\x89\x00\x7c\xb1\x07\x50\x23\x10\x08\x90\xd7\xeb\xd5\xdb\x07\x32\x65\x5b\xa1\x84\xc2\x8b\xb3\xd9\x6c\x24\x0b\x25\x99\xa1\xf1\xef\xab\x43\x47\x20\x15\x3e\x19\x09\x92\xff\x03\xc1\xbb\x70\x0a\x9f\xac\xf9\x90\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x70\x47\x51\xfd\x38\x02\x00\x00")

func texturesBlocksCobblestonePngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksCobblestonePng,
		"textures/blocks/cobblestone.png",
	)
}

func texturesBlocksCobblestonePng() (*asset, error) {
	bytes, err := texturesBlocksCobblestonePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/cobblestone.png", size: 568, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksDirtPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x0a\x01\xf5\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xd1\x49\x44\x41\x54\x78\xda\x75\x92\xb1\x0d\x42\x31\x0c\x44\xbd\x0e\x2b\x20\xd1\x51\xd1\x23\x81\xc4\x08\x29\x69\x18\x00\xfd\x0d\xd8\x85\xe9\x40\x17\xe9\xa2\xf7\xef\xe7\x17\x56\x12\xdb\x39\xfb\xce\xae\xef\xfb\xf1\xfb\xb4\x4b\xb7\xd7\xf5\xd8\x6d\xe6\xbb\x9f\x0e\xab\xb8\xcf\xd2\x45\x89\x4c\xd0\x7b\x59\x96\xe1\x33\x20\xef\x8a\xc9\xca\x68\xae\xc2\x37\xab\x31\x87\x79\x25\xb4\xd6\xda\x70\xb0\x9b\xa4\x92\x5d\x0c\x00\x07\x15\xd0\x67\x72\x27\xa0\x0a\xa5\xaf\xdc\x56\x56\x72\xab\xd4\x86\xf7\x21\x62\x72\x94\x78\x4c\xa0\xe2\xa4\xe9\xb3\x32\x39\xc7\xe7\x6e\x66\xfe\x0e\x90\x4e\x9e\x6e\x39\x3f\x33\x36\xdd\x83\xe4\x9e\xbc\x49\xa5\x72\x3c\xe4\x6c\x60\xfb\x49\xc5\x5a\xd5\x8c\x17\x2b\x68\x74\xa4\xc0\x31\xf7\x4d\x4c\x67\x82\xec\x99\xbb\x5a\x51\x90\x3d\x6f\xe7\x8d\x70\xa6\x31\xdb\xd0\xca\x24\x2a\x4c\xfe\x59\x68\x03\x90\x3b\x60\x91\xf6\xe6\xef\x02\x7f\xf6\x85\x28\xab\x7a\x97\xa8\x59\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xf3\x88\x4a\xb1\x0a\x01\x00\x00")

func texturesBlocksDirtPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksDirtPng,
		"textures/blocks/dirt.png",
	)
}

func texturesBlocksDirtPng() (*asset, error) {
	bytes, err := texturesBlocksDirtPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/dirt.png", size: 266, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksStonePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xdf\x00\x20\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xa6\x49\x44\x41\x54\x78\xda\x8d\x52\xc1\x0d\xc4\x20\x0c\xcb\xb8\x0c\xc0\x1f\x36\x60\xe4\x9e\x82\xe4\xca\xb8\xce\xb5\x8f\xb4\x60\x42\x6c\x27\xc4\x18\xe3\xea\xbd\x1f\x91\xd8\x5a\x6b\x47\x6b\x6d\xff\xab\xbc\xc8\x0f\x5f\x40\x70\x22\xe3\x59\x10\x77\xf2\x6c\x17\x48\x10\xc9\xbc\xc6\x65\xb0\x31\x19\xd6\xa1\x00\x0a\x2a\xae\xf2\x0f\x0b\x4e\xb6\x86\x5a\x84\x9d\xe0\x6a\x8e\x8d\x15\xf1\x19\xb0\x40\xb5\xdc\xcc\x39\xef\x24\xc6\xd5\xff\xa1\xa0\x62\xe6\xd0\xc6\xb2\xe2\x70\x33\x77\x5d\xaf\x22\xfe\x31\x57\xfe\x61\xf1\xf1\x90\xb4\xe3\x2c\x9f\x59\x59\x5d\x30\x03\x58\x9c\x7c\x87\xdd\x4d\xfc\x32\xff\x4f\x0f\x49\x65\xba\x49\xa8\x8a\xd7\x31\x3a\x2b\x87\x02\x37\xf3\xea\x11\xb9\xc2\x3f\x2e\x4c\x77\x30\xec\x7e\xe6\xa6\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x93\x13\x5c\x2e\xdf\x00\x00\x00")

func texturesBlocksStonePngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksStonePng,
		"textures/blocks/stone.png",
	)
}

func texturesBlocksStonePng() (*asset, error) {
	bytes, err := texturesBlocksStonePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/stone.png", size: 223, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesEnvironmentMoonPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x74\x04\x8b\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x40\x08\x02\x00\x00\x00\x5d\xb4\xe8\x28\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x04\x2b\x49\x44\x41\x54\x78\xda\xed\x9b\x4b\x72\xd3\x40\x10\x86\x2d\xcb\x4f\xf9\x99\xc4\x4e\x42\x42\x01\x95\x00\xa6\x8a\x05\x5b\x8e\xc1\x8a\x2d\x3b\xb8\x00\x2b\xaa\xb8\x03\x55\x2c\x38\x01\x6b\xb6\x1c\x82\x0b\xb0\xe7\x1e\xf0\xcf\xb4\x67\x32\xd1\xc3\x19\x87\x16\x52\x91\x3f\xd5\xe5\x92\x25\xf9\xeb\xcc\xfc\xea\x1e\x5b\xea\xee\x74\x6e\xf8\x4b\x22\xec\x6f\xfe\xc8\xbf\x91\x98\x74\x77\xd9\xde\xfe\xc8\x8f\x41\xdb\x0f\x27\xdd\x14\xd6\x49\xf0\xda\x2b\x35\x7b\x48\xce\x29\x3a\x23\x7f\x3f\x7e\x1e\xed\xb8\xfd\x6e\x3a\x48\xba\xc6\xba\xe9\xd0\x9b\xdb\x83\xd7\xbe\xf7\x54\x70\x43\x7e\x3c\xdf\xd1\x43\xb4\x40\xd3\xde\x28\xed\x8f\x7b\x83\x2c\xed\x5f\x99\x7d\x3b\xc6\x21\xe7\xec\xba\x9b\xaa\x01\x90\x5f\xc1\xcf\xd1\x8d\xaa\x06\x6d\xb9\xbd\xc1\xa4\x3f\x9c\xf5\x47\xf3\xbc\x0d\x67\x38\x24\x9e\xac\xec\xc6\x4d\x85\x0f\xf2\x77\xf3\xaf\x82\x2b\x15\x61\x21\x5d\x88\x1e\x8c\x97\xc3\xec\xd0\xd8\xe4\xc8\x98\xdd\xc6\xce\x6b\x6e\x7a\x23\x91\x1a\x90\xaa\x01\x90\x5f\xc1\x77\xf2\x22\x4c\x20\x94\xa3\x4f\x3d\x7a\x34\x5d\x8d\xa6\xeb\xf1\xec\xc4\x1b\xde\x62\xa7\x77\x83\x93\xc5\x87\xd5\xb9\x17\x88\x4c\x7e\x0c\x3f\x90\x17\xc1\xe2\xe9\xc3\xec\x00\x7a\x0a\x3a\x5b\x9c\x4d\x96\xe7\xd9\xc2\x98\xdd\x38\x13\x37\x56\xf0\x03\xef\xc3\xa6\xbc\x50\x64\xf2\x63\xf8\x9d\x44\xe4\x35\xc1\x65\xf2\xda\x24\xa0\x1f\x8f\x67\xa7\x80\x4e\x0f\x1e\x4c\x0f\x1f\xce\x8e\x1e\xc1\xb0\x81\xb7\xd8\x89\x43\x38\x21\xf0\x31\xc1\xc7\x6d\xa0\x59\x91\x83\x01\x90\xbf\x83\x9f\x38\x07\x5b\x79\x91\xb6\x4c\x64\x59\x7a\x36\xbf\x37\x59\xde\x07\x71\xbe\xba\x98\xaf\x2e\xe7\xeb\xc7\xc6\xb0\xb1\xba\xc0\x4e\x1c\xc2\x09\xe2\xc3\xc4\x9a\xc9\x77\x5b\x91\x9d\x83\x84\xfc\x9b\xf8\x2e\xbe\x5c\x76\x13\x79\x0f\x6d\x64\x9d\x3a\xfa\xe5\xe2\xf8\xe9\xe2\x78\xb3\x3c\x79\x06\xc3\x06\xde\x62\xa7\xf8\xb0\x3a\xaf\xf1\x91\xad\xc8\x36\xd3\x5d\x5b\x6a\xc8\xdf\xc5\xdf\xae\x30\xdb\xf8\x12\x79\xb1\x80\xd8\xbc\x76\x2e\xf4\x9f\xbf\x7e\x7b\xfb\xf4\xe5\x2b\x5e\x5f\xbd\x7e\xfb\xe6\xdd\x07\xf1\x61\x63\x0d\xf9\x6e\x25\x22\xfb\x28\x0b\x07\x10\xc9\x07\xf3\xf9\x8b\x97\x26\x84\xad\xe9\xf2\x01\xaf\x89\x2f\xe4\x1c\x3c\x9a\x1f\x38\x30\xf1\xe5\xe4\xc5\x32\x82\x44\x86\x50\x82\x98\x32\xef\xdf\xbe\xff\x08\x67\x0a\x66\x75\xbe\xb0\xf9\xee\x2c\x10\x39\xab\x1a\x40\x0c\x3f\x1c\x86\x2e\xbf\x38\x47\x5a\x7c\x60\x71\x45\xe6\x66\x3f\x9a\xef\x1c\xd8\x5f\x16\x5b\x07\x50\x0c\x4b\xb9\x0b\xae\x4d\x38\x41\xf2\xfa\xfe\xe3\x67\x2b\xc0\xc6\x05\x9a\x11\x59\x1c\x00\x62\xd3\x5c\x7e\x00\x91\x7c\x89\x2d\x19\x8c\x2e\xbf\x4c\x00\x1d\x7e\xf1\xda\xdf\x87\x5f\x74\x30\x39\x92\xf8\xc2\x82\x8e\x25\x05\x49\x4d\xe6\x1d\x16\x4e\x13\x0c\x87\x70\x02\x4e\x93\x28\xc3\x07\xa3\x06\xb0\x93\x1f\x0a\xa0\xcb\x2f\x5e\xa7\x5a\xfc\xd2\xcb\x3f\x9a\x1f\xe1\x40\xf2\xbe\xbf\x4e\x65\x30\x30\xad\x01\x84\x7c\x91\x56\x57\x00\xe1\xd7\x27\x40\x55\x04\xdc\x56\x80\xb2\x10\x96\x79\x17\xab\x23\x05\x79\x78\x4d\x29\xc8\x5f\x34\xed\x4d\x41\x3b\x16\x19\x4c\xb7\xcc\x8b\x98\x7f\xab\xb5\x88\xe5\xf8\xea\x8b\x70\xc8\x6f\xef\x22\x1c\xf3\x35\x2b\x9c\x26\xc5\xaf\xa1\x21\xbf\xd6\xaf\x89\x75\xf3\x6f\xff\x35\x74\xff\x1f\x1a\x9b\xc5\xfa\x49\x9d\x3f\x64\xee\x0e\x9f\xb7\x0a\x9a\xbe\x15\xc1\x9b\x65\x8d\xf3\x79\xbb\xb8\xf1\xdb\xd1\x7c\x60\xd2\xf4\x03\x19\x3e\x32\x6c\xf8\x91\x24\x1f\x9a\x37\xfa\x50\x9e\x65\x23\x8d\xf3\x59\x38\xd5\x74\x61\x16\x4b\x07\x1b\xe7\xb3\x78\xb6\x15\x7c\x96\x8f\xb7\x8b\xcf\x09\x62\x7f\x00\xfb\x03\xb8\x48\xb2\x3f\x80\xfd\x01\xfc\x21\xc6\xfe\x00\xf6\x07\xf0\x66\x1c\xfb\x03\xd8\x1f\xc0\x07\x32\xec\x0f\x60\x7f\x00\x1f\xca\xb3\x3f\xe0\x8e\xf5\x07\xa0\xde\xa8\xd4\xb4\x0a\x9b\xc2\x62\x26\x60\x7d\x05\x98\x3a\x1f\x70\x90\xa5\x50\x0e\xc5\x8a\x75\xf0\xf1\x6f\xfb\x22\x5a\xb5\xfe\x80\xd2\xc2\x47\xec\xd4\x2a\xed\x2b\x92\x75\xfb\x0f\x42\x32\x66\x1f\x26\x75\xa8\xba\x7c\x0f\xf7\xa5\xae\x6a\xfd\x01\xd5\x02\xe8\x14\xb7\x96\xc2\x15\x8b\x7f\x73\x58\x3f\x47\x8a\x7c\x4f\x96\x08\xd8\x87\x1f\x51\x7e\x5d\x25\x80\x56\x79\x77\x29\x5c\xb1\xff\xa0\x28\x00\x52\x04\x4c\x91\xef\x33\xa7\x54\x8f\xef\xc3\x6f\xab\x00\x8a\xfd\x07\xc5\xe4\x26\x29\x42\x57\x00\xbf\xb4\x78\x53\xeb\x0f\xf8\xff\x52\x90\xcb\xd1\xca\x29\x48\xec\x96\x29\xa8\x55\x8b\xb0\x6e\xff\x41\x51\x00\xd1\x40\x7d\x11\xf6\xfd\x13\xae\x81\x45\xa9\x3f\xe0\xdf\x7f\x0d\xd5\xed\x3f\x28\x85\xb7\x86\xcf\xfa\x7d\xf6\x07\xb0\x3f\x80\x37\xcb\xd8\x1f\xc0\xfe\x00\x3e\x30\x61\x7f\x00\xfb\x03\xf8\xd0\x9c\xfd\x01\xec\x0f\x60\xe1\x14\xfb\x03\xd8\x1f\xc0\xe2\x59\xf6\x07\xdc\x15\xfe\x1f\xfc\xa7\x4e\x51\x3c\x73\x51\x80\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x7a\x06\x78\x87\x74\x04\x00\x00")

func texturesEnvironmentMoonPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesEnvironmentMoonPng,
		"textures/environment/moon.png",
	)
}

func texturesEnvironmentMoonPng() (*asset, error) {
	bytes, err := texturesEnvironmentMoonPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/environment/moon.png", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesEnvironmentSunPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xe8\x01\x17\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x01\x9f\x49\x44\x41\x54\x48\xc7\xc5\x96\x5f\x4e\xc4\x20\x10\x87\x3b\x2d\xbd\x89\x89\x7f\x5e\x7c\x57\xcf\x60\xa2\x5e\xc0\xa3\x79\x01\x35\xf1\x0c\xea\xbb\x2f\xba\x26\xde\xa4\x0b\x38\x30\xc3\x30\xb0\xd8\x7d\x62\x25\xa4\xfe\x40\xfd\xbe\x32\xec\xb6\xc0\xb0\xda\x00\x86\xbd\xcd\xfb\x55\xc2\x5e\xe2\xba\x63\x97\x5e\xcd\x40\x13\x44\x19\x78\xca\xc3\x1f\x12\x1f\x60\x90\x42\x81\x96\x0c\x15\x5d\xa1\x03\x17\x7f\x52\x56\x3e\x41\x87\x39\x1f\x1a\x9b\x2a\x0d\x05\x28\xb9\x15\x7a\x00\x6e\x59\x23\x8b\x14\x74\x0a\x59\x43\xe8\x2c\xa8\xe8\xe3\xc8\xd0\x32\x34\x6a\xed\x1c\x3b\x74\xa8\x1c\x95\x80\x59\x63\x68\xa0\x86\x80\x5d\xfe\x92\xfe\x19\x59\xc4\x95\xab\x0b\x49\xac\xa5\x20\x55\x83\x59\xb1\xeb\xcc\xbf\x92\xdb\x57\x50\xe9\x79\x98\x4a\x57\x0b\x98\x38\x4d\x23\xd1\x25\xc4\x0c\x6a\x1b\x42\x11\xac\xcd\x68\x6b\x5d\x19\x64\x57\x92\x20\xdd\xe3\x10\xa1\x01\x47\x74\x0c\x32\x4c\x9b\xc4\x77\x87\x2c\x72\xc4\xab\x1e\xa2\x23\xef\x10\xef\x9e\xd4\x04\x41\x11\x27\x5d\x86\x24\xe0\xca\x8a\x20\x76\x09\x3c\x94\x8a\xf1\x87\x9b\xba\xba\x77\x30\x66\xd4\x81\xae\x3b\x2b\xf0\xdb\xad\x93\xab\x0e\xb4\x0e\x2e\x91\xaa\x7e\x70\x68\xa2\x31\x21\x60\xff\x79\xb9\x6a\x7e\x93\x8f\xae\x5f\x11\x1a\xbb\x2f\x7d\x8e\x56\x50\x0b\x8c\x99\x08\x8a\xf4\x79\x1e\x89\x8e\x33\xdf\xcf\x97\xc3\xd9\x7d\x8d\xff\x7c\x38\xbe\x79\x43\x34\x39\x96\x85\xe9\x71\xc6\x36\x04\x52\x13\xec\x89\x4e\x43\xd8\x3c\x91\xe0\x5c\xe1\x3f\x50\x70\x72\x2b\x02\x4f\x0e\x92\x49\xa1\xda\x02\xa1\xcf\x33\x2f\xe8\xeb\xf1\xa2\x29\x38\xbd\x7b\x27\xfa\xb2\x58\xed\xf8\x6f\x41\xaf\x12\x75\xdf\xe4\xbe\x1f\xd3\xbe\x5f\xb4\xbe\x8f\x8a\xee\x0f\xbb\x03\x3d\xae\xbb\xbf\x70\xba\xbf\x32\xfb\xbe\xf4\xbb\x1f\x5b\x0e\x71\xf0\xea\x7e\x74\x3c\xc4\xe1\xb7\xd3\xf1\xfd\x17\x56\x05\xa6\x66\x13\x4d\xa0\x1a\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x68\xc5\x6b\x65\xe8\x01\x00\x00")

func texturesEnvironmentSunPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesEnvironmentSunPng,
		"textures/environment/sun.png",
	)
}

func texturesEnvironmentSunPng() (*asset, error) {
	bytes, err := texturesEnvironmentSunPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/environment/sun.png", size: 488, mode: os.FileMode(420), modTime: time.Unix(1516003593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"blocks.toml": blocksToml,
	"shaders/chunkFrag.glsl": shadersChunkfragGlsl,
	"shaders/chunkVert.glsl": shadersChunkvertGlsl,
	"shaders/skyFrag.glsl": shadersSkyfragGlsl,
	"shaders/skyVert.glsl": shadersSkyvertGlsl,
	"shaders/sunriseFrag.glsl": shadersSunrisefragGlsl,
	"shaders/sunriseVert.glsl": shadersSunrisevertGlsl,
	"textures/blocks/bedrock.png": texturesBlocksBedrockPng,
	"textures/blocks/cobblestone.png": texturesBlocksCobblestonePng,
	"textures/blocks/dirt.png": texturesBlocksDirtPng,
	"textures/blocks/stone.png": texturesBlocksStonePng,
	"textures/environment/moon.png": texturesEnvironmentMoonPng,
	"textures/environment/sun.png": texturesEnvironmentSunPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"blocks.toml": &bintree{blocksToml, map[string]*bintree{}},
	"shaders": &bintree{nil, map[string]*bintree{
		"chunkFrag.glsl": &bintree{shadersChunkfragGlsl, map[string]*bintree{}},
		"chunkVert.glsl": &bintree{shadersChunkvertGlsl, map[string]*bintree{}},
		"skyFrag.glsl": &bintree{shadersSkyfragGlsl, map[string]*bintree{}},
		"skyVert.glsl": &bintree{shadersSkyvertGlsl, map[string]*bintree{}},
		"sunriseFrag.glsl": &bintree{shadersSunrisefragGlsl, map[string]*bintree{}},
		"sunriseVert.glsl": &bintree{shadersSunrisevertGlsl, map[string]*bintree{}},
	}},
	"textures": &bintree{nil, map[string]*bintree{
		"blocks": &bintree{nil, map[string]*bintree{
			"bedrock.png": &bintree{texturesBlocksBedrockPng, map[string]*bintree{}},
			"cobblestone.png": &bintree{texturesBlocksCobblestonePng, map[string]*bintree{}},
			"dirt.png": &bintree{texturesBlocksDirtPng, map[string]*bintree{}},
			"stone.png": &bintree{texturesBlocksStonePng, map[string]*bintree{}},
		}},
		"environment": &bintree{nil, map[string]*bintree{
			"moon.png": &bintree{texturesEnvironmentMoonPng, map[string]*bintree{}},
			"sun.png": &bintree{texturesEnvironmentSunPng, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

