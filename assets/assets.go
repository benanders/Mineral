// Code generated by go-bindata.
// sources:
// assets/data/textures/blocks/bedrock.png
// assets/data/textures/blocks/dirt.png
// assets/data/textures/blocks/stone.png
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _texturesBlocksBedrockPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xe1\x00\x1e\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xa8\x49\x44\x41\x54\x78\xda\x8d\x52\xdb\x11\xc0\x20\x08\xe3\xcf\x81\x1c\xc6\x01\x1c\xca\x71\xdb\xc3\xbb\xf4\x02\x0d\xb5\x1f\xb4\x8a\x98\x07\x68\x63\x8c\xab\xf7\x1e\xc2\x73\x6b\xad\x1d\xad\xb5\xfd\xaf\xea\xcc\x3f\x7c\x21\x87\x17\xf2\xde\x01\x71\xc7\xcf\x36\x80\x27\x81\xca\x6b\x5c\x06\x1b\x93\x61\x6d\x39\x01\xc0\x9c\xcf\xf2\x83\x05\x96\x5b\x85\xb2\xe7\x44\xc6\x68\x8a\x8d\x15\xf1\x19\x72\x06\x34\xdf\xcc\x39\x9f\x22\xce\x67\xff\x41\x41\xc5\xcc\x91\x1b\xcb\x8a\x4d\xcd\x5c\x75\xbd\x0a\xfb\x62\xae\xfc\xc3\xe2\xeb\x21\xe5\x8e\xb3\x7c\x66\x65\x75\xc6\x0c\x60\x51\xf2\x55\xee\x69\xe2\x9f\xf9\x1f\x1f\x12\x8a\x2b\xcf\xb0\x92\x55\x1c\xc7\xa8\xac\x04\x05\x6a\xe6\xd5\x23\x52\xc0\x37\xa6\xe5\xfa\x44\xae\xdd\xf8\x35\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x0a\x97\xa4\x48\xe1\x00\x00\x00")

func texturesBlocksBedrockPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksBedrockPng,
		"textures/blocks/bedrock.png",
	)
}

func texturesBlocksBedrockPng() (*asset, error) {
	bytes, err := texturesBlocksBedrockPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/bedrock.png", size: 225, mode: os.FileMode(420), modTime: time.Unix(1515990991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksDirtPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x0a\x01\xf5\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xd1\x49\x44\x41\x54\x78\xda\x75\x92\xb1\x0d\x42\x31\x0c\x44\xbd\x0e\x2b\x20\xd1\x51\xd1\x23\x81\xc4\x08\x29\x69\x18\x00\xfd\x0d\xd8\x85\xe9\x40\x17\xe9\xa2\xf7\xef\xe7\x17\x56\x12\xdb\x39\xfb\xce\xae\xef\xfb\xf1\xfb\xb4\x4b\xb7\xd7\xf5\xd8\x6d\xe6\xbb\x9f\x0e\xab\xb8\xcf\xd2\x45\x89\x4c\xd0\x7b\x59\x96\xe1\x33\x20\xef\x8a\xc9\xca\x68\xae\xc2\x37\xab\x31\x87\x79\x25\xb4\xd6\xda\x70\xb0\x9b\xa4\x92\x5d\x0c\x00\x07\x15\xd0\x67\x72\x27\xa0\x0a\xa5\xaf\xdc\x56\x56\x72\xab\xd4\x86\xf7\x21\x62\x72\x94\x78\x4c\xa0\xe2\xa4\xe9\xb3\x32\x39\xc7\xe7\x6e\x66\xfe\x0e\x90\x4e\x9e\x6e\x39\x3f\x33\x36\xdd\x83\xe4\x9e\xbc\x49\xa5\x72\x3c\xe4\x6c\x60\xfb\x49\xc5\x5a\xd5\x8c\x17\x2b\x68\x74\xa4\xc0\x31\xf7\x4d\x4c\x67\x82\xec\x99\xbb\x5a\x51\x90\x3d\x6f\xe7\x8d\x70\xa6\x31\xdb\xd0\xca\x24\x2a\x4c\xfe\x59\x68\x03\x90\x3b\x60\x91\xf6\xe6\xef\x02\x7f\xf6\x85\x28\xab\x7a\x97\xa8\x59\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xf3\x88\x4a\xb1\x0a\x01\x00\x00")

func texturesBlocksDirtPngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksDirtPng,
		"textures/blocks/dirt.png",
	)
}

func texturesBlocksDirtPng() (*asset, error) {
	bytes, err := texturesBlocksDirtPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/dirt.png", size: 266, mode: os.FileMode(420), modTime: time.Unix(1515990991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturesBlocksStonePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xdf\x00\x20\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xa6\x49\x44\x41\x54\x78\xda\x8d\x52\xc1\x0d\xc4\x20\x0c\xcb\xb8\x0c\xc0\x1f\x36\x60\xe4\x9e\x82\xe4\xca\xb8\xce\xb5\x8f\xb4\x60\x42\x6c\x27\xc4\x18\xe3\xea\xbd\x1f\x91\xd8\x5a\x6b\x47\x6b\x6d\xff\xab\xbc\xc8\x0f\x5f\x40\x70\x22\xe3\x59\x10\x77\xf2\x6c\x17\x48\x10\xc9\xbc\xc6\x65\xb0\x31\x19\xd6\xa1\x00\x0a\x2a\xae\xf2\x0f\x0b\x4e\xb6\x86\x5a\x84\x9d\xe0\x6a\x8e\x8d\x15\xf1\x19\xb0\x40\xb5\xdc\xcc\x39\xef\x24\xc6\xd5\xff\xa1\xa0\x62\xe6\xd0\xc6\xb2\xe2\x70\x33\x77\x5d\xaf\x22\xfe\x31\x57\xfe\x61\xf1\xf1\x90\xb4\xe3\x2c\x9f\x59\x59\x5d\x30\x03\x58\x9c\x7c\x87\xdd\x4d\xfc\x32\xff\x4f\x0f\x49\x65\xba\x49\xa8\x8a\xd7\x31\x3a\x2b\x87\x02\x37\xf3\xea\x11\xb9\xc2\x3f\x2e\x4c\x77\x30\xec\x7e\xe6\xa6\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x93\x13\x5c\x2e\xdf\x00\x00\x00")

func texturesBlocksStonePngBytes() ([]byte, error) {
	return bindataRead(
		_texturesBlocksStonePng,
		"textures/blocks/stone.png",
	)
}

func texturesBlocksStonePng() (*asset, error) {
	bytes, err := texturesBlocksStonePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "textures/blocks/stone.png", size: 223, mode: os.FileMode(420), modTime: time.Unix(1515990991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"textures/blocks/bedrock.png": texturesBlocksBedrockPng,
	"textures/blocks/dirt.png": texturesBlocksDirtPng,
	"textures/blocks/stone.png": texturesBlocksStonePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"textures": &bintree{nil, map[string]*bintree{
		"blocks": &bintree{nil, map[string]*bintree{
			"bedrock.png": &bintree{texturesBlocksBedrockPng, map[string]*bintree{}},
			"dirt.png": &bintree{texturesBlocksDirtPng, map[string]*bintree{}},
			"stone.png": &bintree{texturesBlocksStonePng, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

